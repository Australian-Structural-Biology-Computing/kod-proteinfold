#!/bin/bash

source .env
# Set defaults to prod if .env is not found
RUN_ENVIRONMENT=${RUN_ENVIRONMENT:-prod}
PROJECT_ROOT=${PROJECT_ROOT:-/srv/scratch/sbf-pipelines/proteinfold}

set -x pipefail
set -e

# Load samplesheet-utils virtual environment
source "${PROJECT_ROOT}/${RUN_ENVIRONMENT}/venv/bin/activate"

export NXF_WORK="/srv/scratch/${USER}/.proteinfold/work"

# Native environment cacheDir used for caching blobs during image pulls
export APPTAINER_CACHEDIR="${APPTAINER_CACHEDIR:-/srv/scratch/${USER}/.images}"
export SINGULARITY_CACHEDIR="${SINGULARITY_CACHEDIR:-/srv/scratch/${USER}/.images}"

# Nextflow variables, checks libraryDir and if image is not found downloads to cache
export NXF_APPTAINER_CACHEDIR="${NXF_APPTAINER_CACHEDIR:-/srv/scratch/${USER}/.images}"
export NXF_SINGULARITY_CACHEDIR="${NXF_SINGULARITY_CACHEDIR:-/srv/scratch/${USER}/.images}"
export NXF_APPTAINER_LIBRARYDIR="${NXF_APPTAINER_LIBRARYDIR:-/srv/scratch/sbf-pipelines/proteinfold/singularity}"
export NXF_SINGULARITY_LIBRARYDIR="${NXF_SINGULARITY_LIBRARYDIR:-/srv/scratch/sbf-pipelines/proteinfold/singularity}"

export PROTEINFOLD_VERSION="1.1.1"

mkdir -p "${NXF_WORK}"

function update_local_version() {
    rm -rf "${HOME}/.proteinfold"
    cp -r ${PROJECT_ROOT}/${RUN_ENVIRONMENT}/pipeline "${HOME}"
    mv "${HOME}/pipeline" "${HOME}/.proteinfold"
}

function pull_cluster_version() {
    cp -r ${PROJECT_ROOT}/${RUN_ENVIRONMENT}/pipeline/* .
}

pull_cluster_version

module purge
module load java/21 nextflow/24

# Check if the input is an amino acid sequence or a path
user_input="<%= context.samplesheet %>"
echo "${user_input}" >> $HOME/debug.txt

RUN_DIR=$(echo "<%= context.run_name %>" | sed "s#[^A-Za-z0-9]#_#g")
OUT_DIR="/srv/scratch/${USER}/proteinfold_output/${RUN_DIR}"
mkdir -p "${OUT_DIR}"

MODE=""
[[ "${user_input}" =~ ^[A-Z\*\-]*$ ]] && MODE="MANUAL_INPUT"
[[ "${user_input}" =~ ^.*\.csv$ ]] && MODE="SAMPLESHEET_INPUT"
[[ "${MODE}" == "" ]] && MODE="DIRECTORY"

echo "${MODE}"

create-samplesheet --version
SAMPLESHEET=""

af_method="<%= context.af_method %>"
OUTPUT_FORMAT=""
case "${af_method}" in
    rfaa) OUTPUT_FORMAT="--yaml" ;;
    hf3)  OUTPUT_FORMAT="--json" ;;
    *)    OUTPUT_FORMAT="" ;;
esac

if [ "${MODE}" == "MANUAL_INPUT" ];
then
    create-samplesheet --aa-string "${user_input}" --suffix "<%= context.prot_mode %>" ${OUTPUT_FORMAT}
    SAMPLESHEET="$(pwd)/samplesheet.csv"
fi

if [ "${MODE}" == "SAMPLESHEET_INPUT" ];
then
    SAMPLESHEET="${user_input}"
fi

if [ "${MODE}" == "DIRECTORY" ];
then
    mkdir fasta
    working_dir=$(pwd)
    cd "${user_input}"
    for filename in *
    do
        echo "${filename}"
        ln -s "$(pwd)/${filename}" $working_dir/fasta/$(echo ${filename} | sed --expression='s/\s/\-/g')
    done

    cd ${working_dir}
    create-samplesheet --directory "./fasta" --suffix "<%= context.prot_mode %>" ${OUTPUT_FORMAT}
    SAMPLESHEET="$(pwd)/samplesheet.csv"
fi

PROT_MODE=""
ARGS=""

[[ "<%= context.af_method %>" == "af2" ]] && PROT_MODE="alphafold2" && ARGS="--alphafold2_db /mnt/af2 --full_dbs true --alphafold2_model_preset <%= context.prot_mode %>"
[[ "<%= context.af_method %>" == "cf" ]] && PROT_MODE="colabfold" && ARGS="--colabfold_db /mnt/af2"
[[ "<%= context.af_method %>" == "esmf" ]] && PROT_MODE="esmfold" && ARGS="--esmfold_db /mnt/af2/esmfold_weights"
[[ "<%= context.af_method %>" == "rfaa" ]] && PROT_MODE="rosettafold_all_atom" && ARGS="--rosettafold_all_atom_db /mnt/af2"
[[ "<%= context.af_method %>" == "hf3" ]] && PROT_MODE="helixfold3" && ARGS="--helixfold3_db /mnt/af2"

module load cuda/10.1.243 cuda/11.8.0 cuda/12.2.1 cuda/12.5.0 cudnn/8.4.0.27-11.6 cudnn/8.6.0.163-11.8 cudnn/9.2.0.82-12 cudnn/9.3.0.75-12

nextflow -c "/srv/scratch/sbf-pipelines/proteinfold/kod_proteinfold.config" run main.nf \
    --input "${SAMPLESHEET}" \
    --outdir "${OUT_DIR}" \
    --mode "${PROT_MODE}" \
    --use_gpu \
    ${ARGS} \
    -profile singularity,unsw_katana

exit 0
